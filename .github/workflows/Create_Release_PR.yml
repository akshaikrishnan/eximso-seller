name: Create Release Branch and PR

# This workflow runs automatically every Saturday at 12:00 PM IST (06:30 UTC)
# and can also be run manually with an optional version input.
on:
  schedule:
    - cron: "30 6 * * 6" # 06:30 UTC on Saturday (12:00 PM IST)
  workflow_dispatch:
    inputs:
      version:
        description: "The semantic version to use (e.g., 1.2.3)"
        required: false

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

  create-pr:
    needs: lint # Run only if 'lint' succeeds
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout develop branch (full history for tags)
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0 # crucial to fetch all history and tags

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      - name: Compute version (no write)
        id: compute_version
        shell: bash
        run: |
          set -euo pipefail

          CURR=$(node -p "require('./package.json').version")
          INPUT="${{ github.event.inputs.version || '' }}"
          EVENT="${{ github.event_name }}"

          bump_semver () {
            local ver="$1" kind="$2"
            ver_base="${ver%%-*}"
            IFS='.' read -r a b c <<< "$ver_base"
            a=${a:-0}; b=${b:-0}; c=${c:-0}
            case "$kind" in
              major) a=$((a+1)); b=0; c=0 ;;
              minor) b=$((b+1)); c=0 ;;
              patch|*) c=$((c+1)) ;;
            esac
            printf "%d.%d.%d" "$a" "$b" "$c"
          }

          if [ "$EVENT" = "schedule" ]; then
            NEW=$(bump_semver "$CURR" "patch")
          elif [ -n "$INPUT" ]; then
            if [[ "$INPUT" =~ ^(major|minor|patch)$ ]]; then
              NEW=$(bump_semver "$CURR" "$INPUT")
            elif [[ "$INPUT" =~ ^[0-9]+(\.[0-9]+){2}(-[0-9A-Za-z.-]+)?$ ]]; then
              NEW="$INPUT"
            else
              echo "Invalid version input: $INPUT" >&2; exit 1
            fi
          else
            echo "No version specified for manual trigger." >&2; exit 1
          fi

          echo "new_version=$NEW" >> "$GITHUB_OUTPUT"

      - name: Prepare placeholder change for PR
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .github
          echo "release init for v${{ steps.compute_version.outputs.new_version }}" > .github/release-init.txt

      - name: Check diff against main
        id: check_diff
        run: |
          set -euo pipefail
          git fetch origin main
          if git diff --quiet origin/main...HEAD -- package.json; then
            echo "No changes in package.json compared to main. Exiting."
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected in package.json compared to main."
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate release notes
        id: release_notes
        shell: bash
        run: |
          # Find the last tag on the main branch
          LAST_TAG=$(git describe --tags --abbrev=0 main 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "No previous tag found. Generating release notes from all commits on develop."
            LOG_RANGE="HEAD"
          else
            echo "Found last tag: $LAST_TAG. Generating notes from new commits."
            LOG_RANGE="$LAST_TAG..HEAD"
          fi

          # Bulleted list of commit messages (oldest first)
          RELEASE_NOTES=$(git log --pretty=format:'- %s' --reverse $LOG_RANGE)

          # Escape for GitHub Actions output
          RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"

          echo "release_notes=$RELEASE_NOTES" >> "$GITHUB_OUTPUT"

      - name: Create Release Branch and Pull Request
        id: release_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # or PAT if policy requires
          title: "Release ${{ steps.compute_version.outputs.new_version }}"
          commit-message: "chore(release): init PR for v${{ steps.compute_version.outputs.new_version }}"
          body: |
            ## Release ${{ steps.compute_version.outputs.new_version }}
            This PR will bump version and include release notes.
          branch: "release/v${{ steps.compute_version.outputs.new_version }}"
          base: main
          labels: "release, automated"
          # optionally keep the placeholder out of future PRs
          add-paths: |
            .github/release-init.txt

      - name: Check if PR was created
        if: ${{ steps.release_pr.outputs.pull-request-number != '' }}
        run: |
          echo "Pull Request created successfully!"
          echo "PR URL: ${{ steps.release_pr.outputs.pull-request-url }}"
      - name: Bump version on PR branch and push
        if: ${{ steps.release_pr.outputs.pull-request-branch != '' }}
        env:
          PR_BRANCH: ${{ steps.release_pr.outputs.pull-request-branch }}
        shell: bash
        run: |
          set -euo pipefail
          echo "PR branch is: $PR_BRANCH"

          # Check out the PR branch the action just created
          git fetch origin "$PR_BRANCH:$PR_BRANCH"
          git checkout "$PR_BRANCH"

          # Remove placeholder, bump, commit
          rm -f .github/release-init.txt || true

          NEW="${{ steps.compute_version.outputs.new_version }}"
          npm version "$NEW" --no-git-tag-version

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json .github/release-init.txt 2>/dev/null || true

          if git diff --cached --quiet; then
            echo "No changes to commit (unexpected)."
          else
            git commit -m "chore(release): bump version to v$NEW"
            git push origin "$PR_BRANCH"
          fi
      - name: Update PR title after bump (optional)
        if: ${{ steps.release_pr.outputs.pull-request-number != '' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr edit "${{ steps.release_pr.outputs.pull-request-number }}" \
            --title "Release ${{ steps.compute_version.outputs.new_version }}"
