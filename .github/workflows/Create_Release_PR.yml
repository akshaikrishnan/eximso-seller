name: Create Release Branch and PR

# This workflow runs automatically every Saturday at 12:00 PM IST (06:30 UTC)
# and can also be run manually with an optional version input.
on:
  schedule:
    - cron: "30 6 * * 6" # 06:30 UTC on Saturday (12:00 PM IST)
  workflow_dispatch:
    inputs:
      version:
        description: "The semantic version to use (e.g., 1.2.3)"
        required: false

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

  create-pr:
    needs: lint # Run only if 'lint' succeeds
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout develop branch (full history for tags)
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0 # crucial to fetch all history and tags
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      - name: Compute version
        id: compute_version
        shell: bash
        run: |
          set -euo pipefail

          CURR=$(node -p "require('./package.json').version")
          INPUT="${{ github.event.inputs.version || '' }}"
          EVENT="${{ github.event_name }}"

          bump_semver () {
            local ver="$1" kind="$2"
            ver_base="${ver%%-*}"
            IFS='.' read -r a b c <<< "$ver_base"
            a=${a:-0}; b=${b:-0}; c=${c:-0}
            case "$kind" in
              major) a=$((a+1)); b=0; c=0 ;;
              minor) b=$((b+1)); c=0 ;;
              patch|*) c=$((c+1)) ;;
            esac
            printf "%d.%d.%d" "$a" "$b" "$c"
          }

          if [ "$EVENT" = "schedule" ]; then
            NEW=$(bump_semver "$CURR" "patch")
          elif [ -n "$INPUT" ]; then
            if [[ "$INPUT" =~ ^(major|minor|patch)$ ]]; then
              NEW=$(bump_semver "$CURR" "$INPUT")
            elif [[ "$INPUT" =~ ^[0-9]+(\.[0-9]+){2}(-[0-9A-Za-z.-]+)?$ ]]; then
              NEW="$INPUT"
            else
              echo "Invalid version input: $INPUT" >&2; exit 1
            fi
          else
            echo "No version specified for manual trigger." >&2; exit 1
          fi

          echo "new_version=$NEW" >> "$GITHUB_OUTPUT"

      - name: Check if there are changes to release
        id: check_changes
        run: |
          set -euo pipefail
          git fetch origin main
          
          # Check if develop has commits ahead of main
          AHEAD_COUNT=$(git rev-list --count origin/main..HEAD)
          echo "Commits ahead of main: $AHEAD_COUNT"
          
          if [ "$AHEAD_COUNT" -eq 0 ]; then
            echo "No new commits to release. Develop is up to date with main."
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            exit 0
          else
            echo "Found $AHEAD_COUNT commits to release."
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate release notes
        id: release_notes
        if: steps.check_changes.outputs.has_changes == 'true'
        shell: bash
        run: |
          # Find the last tag on the main branch
          LAST_TAG=$(git describe --tags --abbrev=0 origin/main 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "No previous tag found. Generating release notes from commits since main."
            LOG_RANGE="origin/main..HEAD"
          else
            echo "Found last tag: $LAST_TAG. Generating notes from new commits."
            LOG_RANGE="$LAST_TAG..HEAD"
          fi

          # Bulleted list of commit messages (oldest first)
          RELEASE_NOTES=$(git log --pretty=format:'- %s (%h)' --reverse $LOG_RANGE)

          # Escape for GitHub Actions output
          RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"

          echo "release_notes<<EOF" >> "$GITHUB_OUTPUT"
          echo "$RELEASE_NOTES" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Create release branch with all changes
        if: steps.check_changes.outputs.has_changes == 'true'
        shell: bash
        run: |
          set -euo pipefail
          
          RELEASE_BRANCH="release/v${{ steps.compute_version.outputs.new_version }}"
          NEW_VERSION="${{ steps.compute_version.outputs.new_version }}"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Delete existing release branch if it exists
          git push origin --delete "$RELEASE_BRANCH" || true
          git branch -D "$RELEASE_BRANCH" || true
          
          # Create new release branch from develop
          git checkout -b "$RELEASE_BRANCH"
          
          # Bump version
          npm version "$NEW_VERSION" --no-git-tag-version
          
          # Commit version bump
          git add package.json package-lock.json
          git commit -m "chore(release): bump version to v$NEW_VERSION"
          
          # Push the release branch
          git push origin "$RELEASE_BRANCH"

      - name: Create Pull Request using GitHub CLI
        if: steps.check_changes.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          
          RELEASE_BRANCH="release/v${{ steps.compute_version.outputs.new_version }}"
          NEW_VERSION="${{ steps.compute_version.outputs.new_version }}"
          
          # Create PR body
          cat > pr_body.md << 'EOF'
          ## Release v${{ steps.compute_version.outputs.new_version }}
          
          This release includes the following changes from develop branch:
          
          ### Changes
          ${{ steps.release_notes.outputs.release_notes }}
          
          ### Version Bump
          - Updated version to v${{ steps.compute_version.outputs.new_version }}
          
          ---
          *This PR was created automatically by the release workflow.*
          EOF
          
          # Check if PR already exists
          EXISTING_PR=$(gh pr list --base main --head "$RELEASE_BRANCH" --json number --jq '.[0].number' || echo "")
          
          if [ -n "$EXISTING_PR" ] && [ "$EXISTING_PR" != "null" ]; then
            echo "PR #$EXISTING_PR already exists. Updating it."
            gh pr edit "$EXISTING_PR" --title "Release v$NEW_VERSION" --body-file pr_body.md
            PR_URL=$(gh pr view "$EXISTING_PR" --json url --jq '.url')
            echo "pr_number=$EXISTING_PR" >> "$GITHUB_OUTPUT"
            echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"
          else
            echo "Creating new PR."
            PR_URL=$(gh pr create \
              --title "Release v$NEW_VERSION" \
              --body-file pr_body.md \
              --base main \
              --head "$RELEASE_BRANCH" \
              --label "release,automated")
            
            PR_NUMBER=$(gh pr view "$PR_URL" --json number --jq '.number')
            echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
            echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"
          fi

      - name: Output results
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "‚úÖ Pull Request created/updated successfully!"
          echo "üìã PR Number: ${{ steps.create_pr.outputs.pr_number }}"
          echo "üîó PR URL: ${{ steps.create_pr.outputs.pr_url }}"
          echo "üåø Branch: release/v${{ steps.compute_version.outputs.new_version }}"
          echo "üì¶ Version: v${{ steps.compute_version.outputs.new_version }}"

      - name: No changes to release
        if: steps.check_changes.outputs.has_changes == 'false'
        run: |
          echo "‚ÑπÔ∏è  No new changes to release. Develop branch is up to date with main."
